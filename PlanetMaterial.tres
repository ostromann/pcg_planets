[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="Shader" id=4]
code = "shader_type spatial;

uniform float min_elevation;
uniform float max_elevation;
uniform sampler2D elevation_color;
uniform sampler2D elevation_metallic;

uniform float beer_factor : hint_range(0.0, 20.0) = 0.1;
uniform vec4 out_color : hint_color = vec4(0.0, 0.2, 1.0, 1.0);
uniform float explosiveness : hint_range(0.001, 0.2, 0.01) = 0.1;
uniform float emission_energy : hint_range(0, 2.0) = 1.0;

varying float elevation;
//render_mode specular_toon;

float generateOffset(float x, float y, float z, float val1, float val2, float time){
	float speed = 2.0;
	
	float radiansX = ((mod(x + z * x * val1, explosiveness) / explosiveness) + (time * speed) * mod(x * 0.8 + z, 1.5)) * 2.0 * 3.14;
	float radiansY = ((mod(val2 * (z * x + x * z + y * x + y * z), explosiveness) / explosiveness) + (time * speed) * 2.0 * mod(x,2.0)) * 2.0 * 3.14;
	float radiansZ = ((mod(val2 * (z * x + x * z), explosiveness) / explosiveness) + (time * speed) * 2.0 * mod(x,2.0)) * 2.0 * 3.14;

	return explosiveness * 0.5 * (sin(radiansZ) + cos(radiansX) + cos(radiansY));
}


vec3 applyDistortion(vec3 vertex, float time){
	float xd = generateOffset(vertex.x, vertex.y, vertex.z, 0.2, 0.1, time);
	float yd = generateOffset(vertex.x, vertex.y, vertex.z, 0.1, 0.3, time);
	float zd = generateOffset(vertex.x, vertex.y, vertex.z, 0.15, 0.2, time);
	return vertex + vec3(xd, yd, zd);
}

void fragment() {
//	float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
	float t = elevation /(max_elevation-min_elevation) -(min_elevation /(max_elevation-min_elevation));
	vec3 color = texture(elevation_color, vec2(t, 0.0)).rgb;
	ALBEDO = color;
//	RIM = 2.0;
	METALLIC = texture(elevation_metallic, vec2(t, 0.0)).r;
	ROUGHNESS = texture(elevation_metallic, vec2(t, 0.0)).r;
//	ROUGHNESS = texture(elevation_metallic, vec2(t, 0.0)).r * (1.0 - fresnel);
}

void vertex() {
//	VERTEX = applyDistortion(VERTEX, TIME * 0.1);
	elevation = length(VERTEX);
}







"

[sub_resource type="Gradient" id=2]
interpolation_mode = 2
offsets = PoolRealArray( 0, 0.22807, 0.438596 )
colors = PoolColorArray( 0.257324, 0.96875, 0, 1, 0.0371819, 0.0834961, 0.0548663, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )
width = 12

[sub_resource type="Curve" id=5]
_data = [ Vector2( 0, 0 ), 0.0, 1.4, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=6]
curve = SubResource( 5 )

[resource]
shader = SubResource( 4 )
shader_param/min_elevation = 1.0
shader_param/max_elevation = 1.05
shader_param/beer_factor = 0.1
shader_param/out_color = Color( 0.168627, 0.262745, 0.647059, 1 )
shader_param/explosiveness = 0.001
shader_param/emission_energy = 1.792
shader_param/elevation_color = SubResource( 3 )
shader_param/elevation_metallic = SubResource( 6 )
